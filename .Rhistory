```
Data from the landlord register were provided as a .csv file, listing each unit postcode containing any registered properties and the number of registered properties. It should be noted that, where a property is owned by two or more individuals, each person is required to register separately. In this dataset, however, duplicate listings for the same property have been combined. This is different to the treatment in the Aberdeen note where the data were provided as the number of listings in each postcode. The Renfrewshire dataset was different again as it contained all listings but also an anonymous identifier which let us see where there were multiple listings for a property. The Renfrewshire data note therefore gives some insights into the differences which result.
Various checks were carried out on the postcodes. All begin with "EH" as expected. All but one has the expected 7 or 8 characters. The exception had 9 characters due to an additional space so is easily corrected. However, it is surprising that the system does not seem to check and prevent an obviously invalid postcode from being entered.
In total, there are `r nrow(df_foi)` postcodes with registered properties and they contain a total of `r format(sum(df_foi$NumberOfProperties), digits=4, scientific=FALSE)` properties. That represents an average of `r signif(sum(df_foi$NumberOfProperties)/nrow(df_foi), digits=2)` properties per postcode. The maximum number is `r max(df_foi$NumberOfProperties)`. Figure 2 shows the distribution with very few unit postcodes having more than about 30 registered properties. Note that postcodes with no properties are omitted.  <br><br>
```{r histogram FOI data, include=TRUE}
# histogram of No. or Reg Props
ggplot(data = df_foi,
mapping = aes(x = NumberOfProperties)) +
geom_histogram() +
ggtitle("Figure 2: Number of registered properties per postcode - Edinburgh") +
theme(plot.title = element_text(size = 14, face = "plain")) +
xlab("Number of Registered Properties in Postcode") +
ylab("Number of Postcodes")
```
The number of registered properties is `r signif(100 * sum(df_foi$NumberOfProperties)/63920, 3)`% of the estimated total for Edinburgh (using the SSCQ figure from 2016). As a first estimate, there appear to be `r format(100 - (100 * sum(df_foi$NumberOfProperties)/63920), digits=3, scientific=FALSE)`% of properties not listed (around `r signif(63920 - sum(df_foi$NumberOfProperties), digits=4)` properties). If private renting in Edinburgh continued to fall in 2017, the registration rate would be higher. On the other hand, this figure may also be an underestimate since properties can be listed but not let. Nevertheless, it suggests a very high coverage overall. <br><br>
# Comparison of landlord register with Census
The great advantage of the landlord register data is that it provides detail down to the small area level. Here we aggregate data from unit postcodes to Datazones, and then use these to compare with Census data for the same units.
We do not expect a perfect fit between these data for two reasons. The first is the obvious difference in timing of around six years during which time the sector will have grown faster in some locations than others. The second is that we do not expect all rented properties to be registered, nor all registered properties to be rented as noted in the previous section. Nevertheless, given the apparently high rate of registration, we would expect a strong the relationship between the two.
```{r get pcode lookup}
# open postcode directory - gives some errors which we ignore for now
# NB that to fit onto GitHub, have had to cut down to EH pcodes only but left
#    code unchanged so assumes it is whole of Scotland
df_pcode <- read_csv(
"data/Scottish_Postcode_Directory_2017_2 (EH).csv",
col_types = cols(
pc7 = col_character(),
pc8 = col_character(),
Grid_Reference_Easting = col_double(),
Grid_Reference_Northing = col_double(),
Latitude = col_double(),
Longitude = col_double(),
DataZone2011 = col_character(),
HHC2011 = col_double(),
Pop2011 = col_double(),
HHC2001 = col_double(),
Pop2001 = col_double()
)
)
# cut df_pcodes to "EH"" and only the vars we need to attach to foi data
df_pcode2 <- subset(df_pcode, str_sub(pc7, 1, 2) == "EH",
select = c(pc7, pc8, DataZone2011, LAU_Level1_2011
)
)
# add data from df_pcode2 to df_foi
df_foi <- df_foi %>%
left_join(df_pcode2, by = "pc8")
# check how many cases have missing values - for pc7 it is 18
sum(is.na(df_foi$pc7))
# check number of rows and valid cases in all cols
# NB there is some drop off in HHC and Pop figs, esp. for 2001
nrow(df_foi)
colSums(!is.na(df_foi))
# aggregate foi data to DZ level, summing number of registered props
df_foi_dz <- df_foi %>%
group_by(DataZone2011) %>%
summarise(
NumberOfProperties = sum(NumberOfProperties, na.rm = TRUE)
)
# second cut of df_pcode to those in Edinburgh in order to make list of DZs in city
df_pcode3 <- subset(df_pcode, LAU_Level1_2011 == "S30000008",
select = c(DataZone2011
)
)
# collapse so it is just a list of DZs in Edinburgh
df_dz_Edin <- df_pcode3 %>%
group_by(DataZone2011) %>%
summarise()
# also extract as list
dz_Edin <- (df_dz_Edin$DataZone2011)
# Open census data file with tenure composition for DZs in 2011
df_census <- as_tibble(read_csv("data/tenure DZ2011.csv"))
# make correct PRS and PRSPct figures
df_census <- mutate(df_census,
PRS = PrtRent_2011,
PRSPct = PrtRent_2011/All_HH_2011)
# reduce to DZs in Edinburgh using the list - dz_Edin
df_census <- df_census[df_census$DataZone %in% dz_Edin,]
# rename 'Datazone' as 'Datazone2011' for matching
colnames(df_census)[1] <- "DataZone2011"
# merge census tenure and foi data on to the Edinburgh Datazones file.
df_dz_Edin <- df_dz_Edin %>%
left_join(df_census, by = "DataZone2011")
df_dz_Edin <- df_dz_Edin %>%
left_join(df_foi_dz, by = "DataZone2011")
# check number of DZ and number with registered properties
nrow(df_dz_Edin)
sum(is.na(df_dz_Edin$NumberOfProperties))
# where reg props missing for any DZ, set to zero
df_dz_Edin$NumberOfProperties[
is.na(df_dz_Edin$NumberOfProperties)
] <- 0
```
To aggregate unit postcodes to Datazones, we use a lookup file. In this process, the lookup failed in just `r sum(is.na(df_foi$pc7))` cases - a very small fraction. There are `r nrow(df_dz_Edin)` Datazones in Edinburgh in 2011 and `r nrow(df_foi_dz)` of these have registered landlords in 2017.
# global options for knit
knitr::opts_chunk$set(fig.width=8, fig.height=6, fig.path='Figs/',
echo=FALSE, include=FALSE, warning=FALSE, message=FALSE)
# install packages - first time only
# packs <- c("tidyverse", "dplyr", "readxl")
# install.packages(packs)
# load libraries
library(dplyr)
library(tidyverse)
library(readxl)
# open csv file from FoI request
df_foi <- as_tibble(read_excel("data/16177 Response Data.xlsx"))
# rename cols to remove spaces
names(df_foi) <- c("PropertyPostcode", "NumberOfProperties")
# make id column from row number
df_foi <- tibble::rowid_to_column(df_foi, "ID")
# make pc8 as uppercase version of original - name to match var in pcode lookup
df_foi <- mutate(df_foi,
pc8 = toupper(PropertyPostcode))
# this shows that first two letters in pc8 are always EH
table(str_sub(df_foi$pc8, 1, 2))
# this shows that length of pc8 mostly 7 or 8, but one 9
table(str_length(df_foi$pc8))
# identify the case - "EH16 4 FE"
subset(df_foi, str_length(pc8) > 8)
# change that case
df_foi$pc8[df_foi$pc8 == "EH16 4 FE"] <- "EH16 4FE"
# check that it is fixed
table(str_length(df_foi$pc8))
# quick check on final state of df_foi
head(df_foi)
# histogram of No. or Reg Props
ggplot(data = df_foi,
mapping = aes(x = NumberOfProperties)) +
geom_histogram() +
ggtitle("Figure 2: Number of registered properties per postcode - Edinburgh") +
theme(plot.title = element_text(size = 14, face = "plain")) +
xlab("Number of Registered Properties in Postcode") +
ylab("Number of Postcodes")
# open postcode directory - gives some errors which we ignore for now
# NB that to fit onto GitHub, have had to cut down to EH pcodes only but left
#    code unchanged so assumes it is whole of Scotland
df_pcode <- read_csv(
"data/Scottish_Postcode_Directory_2017_2 (EH).csv",
col_types = cols(
pc7 = col_character(),
pc8 = col_character(),
Grid_Reference_Easting = col_double(),
Grid_Reference_Northing = col_double(),
Latitude = col_double(),
Longitude = col_double(),
DataZone2011 = col_character(),
HHC2011 = col_double(),
Pop2011 = col_double(),
HHC2001 = col_double(),
Pop2001 = col_double()
)
)
# cut df_pcodes to "EH"" and only the vars we need to attach to foi data
df_pcode2 <- subset(df_pcode, str_sub(pc7, 1, 2) == "EH",
select = c(pc7, pc8, DataZone2011, LAU_Level1_2011
)
)
# add data from df_pcode2 to df_foi
df_foi <- df_foi %>%
left_join(df_pcode2, by = "pc8")
# check how many cases have missing values - for pc7 it is 18
sum(is.na(df_foi$pc7))
# check number of rows and valid cases in all cols
# NB there is some drop off in HHC and Pop figs, esp. for 2001
nrow(df_foi)
colSums(!is.na(df_foi))
# aggregate foi data to DZ level, summing number of registered props
df_foi_dz <- df_foi %>%
group_by(DataZone2011) %>%
summarise(
NumberOfProperties = sum(NumberOfProperties, na.rm = TRUE)
)
# second cut of df_pcode to those in Edinburgh in order to make list of DZs in city
df_pcode3 <- subset(df_pcode, LAU_Level1_2011 == "S30000008",
select = c(DataZone2011
)
)
# collapse so it is just a list of DZs in Edinburgh
df_dz_Edin <- df_pcode3 %>%
group_by(DataZone2011) %>%
summarise()
# also extract as list
dz_Edin <- (df_dz_Edin$DataZone2011)
# Open census data file with tenure composition for DZs in 2011
df_census <- as_tibble(read_csv("data/tenure DZ2011.csv"))
# make correct PRS and PRSPct figures
df_census <- mutate(df_census,
PRS = PrtRent_2011,
PRSPct = PrtRent_2011/All_HH_2011)
# reduce to DZs in Edinburgh using the list - dz_Edin
df_census <- df_census[df_census$DataZone %in% dz_Edin,]
# rename 'Datazone' as 'Datazone2011' for matching
colnames(df_census)[1] <- "DataZone2011"
# merge census tenure and foi data on to the Edinburgh Datazones file.
df_dz_Edin <- df_dz_Edin %>%
left_join(df_census, by = "DataZone2011")
df_dz_Edin <- df_dz_Edin %>%
left_join(df_foi_dz, by = "DataZone2011")
# check number of DZ and number with registered properties
nrow(df_dz_Edin)
sum(is.na(df_dz_Edin$NumberOfProperties))
# where reg props missing for any DZ, set to zero
df_dz_Edin$NumberOfProperties[
is.na(df_dz_Edin$NumberOfProperties)
] <- 0
# make text for correlation
corr <- signif(
cor(df_dz_Edin$PRS, df_dz_Edin$NumberOfProperties),
digits = 2)
corr_text <- paste("R =", corr)
# global options for knit
knitr::opts_chunk$set(fig.width=8, fig.height=6, fig.path='Figs/',
echo=FALSE, include=FALSE, warning=FALSE, message=FALSE)
# install packages - first time only
# packs <- c("tidyverse", "dplyr", "readxl")
# install.packages(packs)
# load libraries
library(dplyr)
library(tidyverse)
library(readxl)
# open csv file from FoI request
df_foi <- as_tibble(read_excel("data/16177 Response Data.xlsx"))
# rename cols to remove spaces
names(df_foi) <- c("PropertyPostcode", "NumberOfProperties")
# make id column from row number
df_foi <- tibble::rowid_to_column(df_foi, "ID")
# make pc8 as uppercase version of original - name to match var in pcode lookup
df_foi <- mutate(df_foi,
pc8 = toupper(PropertyPostcode))
# this shows that first two letters in pc8 are always EH
table(str_sub(df_foi$pc8, 1, 2))
# this shows that length of pc8 mostly 7 or 8, but one 9
table(str_length(df_foi$pc8))
# identify the case - "EH16 4 FE"
subset(df_foi, str_length(pc8) > 8)
# change that case
df_foi$pc8[df_foi$pc8 == "EH16 4 FE"] <- "EH16 4FE"
# check that it is fixed
table(str_length(df_foi$pc8))
# quick check on final state of df_foi
head(df_foi)
# histogram of No. or Reg Props
ggplot(data = df_foi,
mapping = aes(x = NumberOfProperties)) +
geom_histogram() +
ggtitle("Figure 2: Number of registered properties per postcode - Edinburgh") +
theme(plot.title = element_text(size = 14, face = "plain")) +
xlab("Number of Registered Properties in Postcode") +
ylab("Number of Postcodes")
# open postcode directory - gives some errors which we ignore for now
# NB that to fit onto GitHub, have had to cut down to EH pcodes only but left
#    code unchanged so assumes it is whole of Scotland
df_pcode <- read_csv(
"data/Scottish_Postcode_Directory_2017_2 (EH).csv",
col_types = cols(
pc7 = col_character(),
pc8 = col_character(),
Grid_Reference_Easting = col_double(),
Grid_Reference_Northing = col_double(),
Latitude = col_double(),
Longitude = col_double(),
DataZone2011 = col_character(),
HHC2011 = col_double(),
Pop2011 = col_double(),
HHC2001 = col_double(),
Pop2001 = col_double()
)
)
# cut df_pcodes to "EH"" and only the vars we need to attach to foi data
df_pcode2 <- subset(df_pcode, str_sub(pc7, 1, 2) == "EH",
select = c(pc7, pc8, DataZone2011, LAU_Level1_2011
)
)
# add data from df_pcode2 to df_foi
df_foi <- df_foi %>%
left_join(df_pcode2, by = "pc8")
# check how many cases have missing values - for pc7 it is 18
sum(is.na(df_foi$pc7))
# check number of rows and valid cases in all cols
# NB there is some drop off in HHC and Pop figs, esp. for 2001
nrow(df_foi)
colSums(!is.na(df_foi))
# aggregate foi data to DZ level, summing number of registered props
df_foi_dz <- df_foi %>%
group_by(DataZone2011) %>%
summarise(
NumberOfProperties = sum(NumberOfProperties, na.rm = TRUE)
)
# second cut of df_pcode to those in Edinburgh in order to make list of DZs in city
df_pcode3 <- subset(df_pcode, LAU_Level1_2011 == "S30000008",
select = c(DataZone2011
)
)
# collapse so it is just a list of DZs in Edinburgh
df_dz_Edin <- df_pcode3 %>%
group_by(DataZone2011) %>%
summarise()
# also extract as list
dz_Edin <- (df_dz_Edin$DataZone2011)
# Open census data file with tenure composition for DZs in 2011
df_census <- as_tibble(read_csv("data/tenure DZ2011.csv"))
# make correct PRS and PRSPct figures
df_census <- mutate(df_census,
PRS = PrtRent_2011,
PRSPct = PrtRent_2011/All_HH_2011)
# reduce to DZs in Edinburgh using the list - dz_Edin
df_census <- df_census[df_census$DataZone %in% dz_Edin,]
# rename 'Datazone' as 'Datazone2011' for matching
colnames(df_census)[1] <- "DataZone2011"
# merge census tenure and foi data on to the Edinburgh Datazones file.
df_dz_Edin <- df_dz_Edin %>%
left_join(df_census, by = "DataZone2011")
df_dz_Edin <- df_dz_Edin %>%
left_join(df_foi_dz, by = "DataZone2011")
# check number of DZ and number with registered properties
nrow(df_dz_Edin)
sum(is.na(df_dz_Edin$NumberOfProperties))
# where reg props missing for any DZ, set to zero
df_dz_Edin$NumberOfProperties[
is.na(df_dz_Edin$NumberOfProperties)
] <- 0
# make text for correlation
corr <- signif(
cor(df_dz_Edin$PRS, df_dz_Edin$NumberOfProperties),
digits = 2)
corr_text <- paste("R =", corr)
# 'expected' line given number of llord register (sum(df_foi$NumberOfProperties))
# and number at Census (49980)
expected_slope <- sum(df_foi$NumberOfProperties)/49980
ggplot(data = df_dz_Edin,
mapping = aes(x = PRS, y = NumberOfProperties)) +
geom_point() +
ggtitle("Figure 3: Registered properties in 2017 vs PRS households in 2011 - Edinburgh") +
xlab("PRS households in 2011 (Census)") +
ylab("No. of registered properties in 2017") +
theme(plot.title = element_text(size = 14, face = "plain")) +
geom_abline(slope=1) +
geom_abline(slope=expected_slope, linetype = "dashed") +
geom_text(x = 25, y = 450,
label = corr_text)
nrow(df_foi_dz)
View(df_foi_dz)
View(df_foi_dz)
View(df_dz_Edin)
# df_foi_dz has 601 rows but only 597 DZ in Edin
# one is na
df_dz_check <- df_foi_dz %>%
left_join(df_dz_Edin, by = "DataZone2011")
View(df_dz_check)
df_dz_check2 <- df_dz_check[
is.na(df_dz_check$All_HH_2011)
]
df_dz_check2 <- subset(df_dz_check, !All_HH_2011 gt 0)
df_dz_check2 <- subset(df_dz_check, !All_HH_2011 gt 0)
df_dz_check2 <- subset(df_dz_check, All_HH_2011 gt 0)
df_dz_check2 <- subset(df_dz_check, All_HH_2011 > 0)
View(df_dz_check2)
df_dz_check2 <- subset(df_dz_check, !All_HH_2011 > 0)
View(df_dz_check2)
df_dz_check2 <- subset(df_dz_check, is.na(All_HH_2011)
df_dz_check2 <- subset(df_dz_check, is.na(All_HH_2011))
df_dz_check2 <- df_dz_check[df_dz_check$All_HH_2011 > 100]
df_dz_check2 <- subset(df_dz_check, df_dz_check$All_HH_2011 == "NA")
View(df_dz_check2)
df_dz_check3 <- subset(df_dz_check, df_dz_check$All_HH_2011 == "NA")
View(df_dz_check3)
View(df_dz_check3)
# df_foi_dz has 601 rows but only 597 DZ in Edin
# one is na
df_dz_check <- df_foi_dz %>%
left_join(df_dz_Edin, by = "DataZone2011")
df_dz_check2 <- subset(df_dz_check, df_dz_check$All_HH_2011 == "NA")
head(df_dz_check)
df_dz_check2 <- subset(df_dz_check, df_dz_check$All_HH_2011 == 299)
df_dz_check2 <- subset(df_dz_check, df_dz_check$All_HH_2011 == NA)
df_dz_check2 <- subset(df_dz_check, df_dz_check$All_HH_2011 == "NA")
# df_foi_dz has 601 rows but only 597 DZ in Edin
# one is na
df_dz_check <- df_foi_dz %>%
left_join(df_dz_Edin, by = "DataZone2011")
head(df_dz_check)
View(df_dz_check)
View(df_dz_Edin)
df_dz_check2 <- df_dz_check[is.na(df_dz_check$All_HH_2011), ]
View(df_dz_check2)
df_foi_dz2 <- df_foi_dz %>%
is.na(DataZone2011)
df_foi_dz2 <- df_foi_dz %>%
is.na(df_foi_dz$DataZone2011)
df_foi_dz2 <- df_foi_dz[
is.na(df_foi_dz$DataZone2011)]
df_foi_dz2 <- df_foi_dz[
is.na(df_foi_dz$DataZone2011),]
View(df_foi_dz2)
sum(df_foi_dz2$NumberOfProperties)
sum(df_foi_dz$NumberOfProperties)[
is.na(df_foi_dz$DataZone2011)
]
sum(df_foi_dz$NumberOfProperties[
is.na(df_foi_dz$DataZone2011)
])
nrow(df_dz_check)
nrow(df_dz_check[is.na(df_dz_check$All_HH_2011)])
nrow(df_dz_check[is.na(All_HH_2011)])
nrow(df_dz_check2)
# global options for knit
knitr::opts_chunk$set(fig.width=8, fig.height=6, fig.path='Figs/',
echo=FALSE, include=FALSE, warning=FALSE, message=FALSE)
# install packages - first time only
# packs <- c("tidyverse", "dplyr", "readxl")
# install.packages(packs)
# load libraries
library(dplyr)
library(tidyverse)
library(readxl)
# Landlord register dataset
```{r get FOI data}
# open csv file from FoI request
df_foi <- as_tibble(read_excel("data/16177 Response Data.xlsx"))
# rename cols to remove spaces
names(df_foi) <- c("PropertyPostcode", "NumberOfProperties")
# make id column from row number
df_foi <- tibble::rowid_to_column(df_foi, "ID")
# make pc8 as uppercase version of original - name to match var in pcode lookup
df_foi <- mutate(df_foi,
pc8 = toupper(PropertyPostcode))
# this shows that first two letters in pc8 are always EH
table(str_sub(df_foi$pc8, 1, 2))
# this shows that length of pc8 mostly 7 or 8, but one 9
table(str_length(df_foi$pc8))
# identify the case - "EH16 4 FE"
subset(df_foi, str_length(pc8) > 8)
# change that case
df_foi$pc8[df_foi$pc8 == "EH16 4 FE"] <- "EH16 4FE"
# check that it is fixed
table(str_length(df_foi$pc8))
# quick check on final state of df_foi
head(df_foi)
```{r histogram FOI data, include=TRUE}
```{r histogram FOI data, include=TRUE}
# histogram of No. or Reg Props
ggplot(data = df_foi,
mapping = aes(x = NumberOfProperties)) +
geom_histogram() +
ggtitle("Figure 2: Number of registered properties per postcode - Edinburgh") +
theme(plot.title = element_text(size = 14, face = "plain")) +
xlab("Number of Registered Properties in Postcode") +
ylab("Number of Postcodes")
# open postcode directory - gives some errors which we ignore for now
# NB that to fit onto GitHub, have had to cut down to EH pcodes only but left
#    code unchanged so assumes it is whole of Scotland
df_pcode <- read_csv(
"data/Scottish_Postcode_Directory_2017_2 (EH).csv",
col_types = cols(
pc7 = col_character(),
pc8 = col_character(),
Grid_Reference_Easting = col_double(),
Grid_Reference_Northing = col_double(),
Latitude = col_double(),
Longitude = col_double(),
DataZone2011 = col_character(),
HHC2011 = col_double(),
Pop2011 = col_double(),
HHC2001 = col_double(),
Pop2001 = col_double()
)
)
# cut df_pcodes to "EH"" and only the vars we need to attach to foi data
df_pcode2 <- subset(df_pcode, str_sub(pc7, 1, 2) == "EH",
select = c(pc7, pc8, DataZone2011, LAU_Level1_2011
)
)
# add data from df_pcode2 to df_foi
df_foi <- df_foi %>%
left_join(df_pcode2, by = "pc8")
View(df_pcode2)
# check how many cases have missing values - for pc7 it is 18
sum(is.na(df_foi$pc7))
temp <- df_foi[is.na(df_foi$DataZone2011), ]
View(temp)
sum(temp$NumberOfProperties)
sum(df_foi$NumberOfProperties[is.na(df_foi$DataZone2011)])
# check number of rows and valid cases in all cols
# NB there is some drop off in HHC and Pop figs, esp. for 2001
nrow(df_foi)
colSums(!is.na(df_foi))
# aggregate foi data to DZ level, summing number of registered props
df_foi_dz <- df_foi %>%
group_by(DataZone2011) %>%
summarise(
NumberOfProperties = sum(NumberOfProperties, na.rm = TRUE)
)
nrow(df_foi_dz)
# check number of rows and valid cases in all cols
# NB there is some drop off in HHC and Pop figs, esp. for 2001
nrow(df_foi)
colSums(!is.na(df_foi))
# aggregate foi data to DZ level, summing number of registered props
df_foi_dz <- df_foi %>%
group_by(DataZone2011) %>%
summarise(
NumberOfProperties = sum(NumberOfProperties, na.rm = TRUE)
)
nrow(df_foi_dz)
df_foi_dz2 <- df_foi_dz[
is.na(df_foi_dz$DataZone2011),]
sum(df_foi_dz2$NumberOfProperties)
sum(df_foi_dz$NumberOfProperties[
is.na(df_foi_dz$DataZone2011)
])
sum(df_foi_dz$NumberOfProperties[
is.na(df_foi_dz$DataZone2011)
])
