ylab("No. of registered properties in 201x") +
geom_abline(slope=1)
geom_text(x = 25, y = 450,
label = corr_text)
# make text for correlation
x <- signif(
cor(df_dz_Edin$PRS, df_dz_Edin$NumberOfProperties),
digits = 2)
corr_text <- paste("R =", x)
ggplot(data = df_dz_Edin,
mapping = aes(x = PRS, y = NumberOfProperties)) +
geom_point() +
ggtitle("Registered properties vs PRS households - Edinburgh") +
xlab("PRS households in 2011 (Census)") +
ylab("No. of registered properties in 201x") +
geom_abline(slope=1) +
geom_text(x = 25, y = 450,
label = corr_text)
knitr::opts_chunk$set(echo = TRUE)
# install packages - first time only
# packs <- c("tidyverse", "dplyr", "readxl")
# install.packages(packs)
# load libraries
library(dplyr)
library(tidyverse)
library(readxl)
# open csv file from FoI request
df_foi <- as_tibble(read_excel("data/16177 Response Data.xlsx"))
# rename cols to remove spaces
names(df_foi) <- c("PropertyPostcode", "NumberOfProperties")
# make id column from row number
df_foi <- tibble::rowid_to_column(df_foi, "ID")
# make pc8 as uppercase version of original - name to match var in pcode lookup
df_foi <- mutate(df_foi,
pc8 = toupper(PropertyPostcode))
# this shows that first two letters in pc8 are always EH
table(str_sub(df_foi$pc8, 1, 2))
# this shows that length of pc8 mostly 7 or 8, but one 9
table(str_length(df_foi$pc8))
# identify the case - "EH16 4 FE"
subset(df_foi, str_length(pc8) > 8)
# change that case
df_foi$pc8[df_foi$pc8 == "EH16 4 FE"] <- "EH16 4FE"
# check that it is fixed
table(str_length(df_foi$pc8))
# quick check on final state of df_foi
head(df_foi)
# open postcode directory - gives some errors which we ignore for now
# NB that to fit onto GitHub, have had to cut down to EH pcodes only but left
#    code unchanged so assumes it is whole of Scotland
df_pcode <- read_csv(
"data/Scottish_Postcode_Directory_2017_2 (EH).csv",
col_types = cols(
pc7 = col_character(),
pc8 = col_character(),
Grid_Reference_Easting = col_double(),
Grid_Reference_Northing = col_double(),
Latitude = col_double(),
Longitude = col_double(),
DataZone2011 = col_character(),
HHC2011 = col_double(),
Pop2011 = col_double(),
HHC2001 = col_double(),
Pop2001 = col_double()
)
)
# cut df_pcodes to "EH"" and only the vars we need to attach to foi data
df_pcode2 <- subset(df_pcode, str_sub(pc7, 1, 2) == "EH",
select = c(pc7, pc8, DataZone2011, LAU_Level1_2011
)
)
# add data from df_pcode2 to df_foi
df_foi <- df_foi %>%
left_join(df_pcode2, by = "pc8")
# check how many cases have missing values - for pc7 it is 18
sum(is.na(df_foi$pc7))
# check number of rows and valid cases in all cols
# NB there is some drop off in HHC and Pop figs, esp. for 2001
nrow(df_foi)
colSums(!is.na(df_foi))
# aggregate foi data to DZ level, summing number of registered props
df_foi_dz <- df_foi %>%
group_by(DataZone2011) %>%
summarise(
NumberOfProperties = sum(NumberOfProperties, na.rm = TRUE)
)
# second cut of df_pcode to those in Edinburgh in order to make list of DZs in city
df_pcode3 <- subset(df_pcode, LAU_Level1_2011 == "S30000008",
select = c(DataZone2011
)
)
# collapse so it is just a list of DZs in Edinburgh
df_dz_Edin <- df_pcode3 %>%
group_by(DataZone2011) %>%
summarise()
# also extract as list
dz_Edin <- (df_dz_Edin$DataZone2011)
# Open census data file with tenure composition for DZs in 2011
df_census <- as_tibble(read_csv("data/tenure DZ2011.csv"))
# make correct PRS and PRSPct figures
df_census <- mutate(df_census,
PRS = PrtRent_2011,
PRSPct = PrtRent_2011/All_HH_2011)
# reduce to DZs in Edinburgh using the list - dz_Edin
df_census <- df_census[df_census$DataZone %in% dz_Edin,]
# rename 'Datazone' as 'Datazone2011' for matching
colnames(df_census)[1] <- "DataZone2011"
# merge census tenure and foi data on to the Edinburgh Datazones file.
df_dz_Edin <- df_dz_Edin %>%
left_join(df_census, by = "DataZone2011")
df_dz_Edin <- df_dz_Edin %>%
left_join(df_foi_dz, by = "DataZone2011")
# check number of DZ and number with registered properties
nrow(df_dz_Edin)
sum(is.na(df_dz_Edin$NumberOfProperties))
# where reg props missing for any DZ, set to zero
df_dz_Edin$NumberOfProperties[
is.na(df_dz_Edin$NumberOfProperties)
] <- 0
# make text for correlation
corr <- signif(
cor(df_dz_Edin$PRS, df_dz_Edin$NumberOfProperties),
digits = 2)
corr_text <- paste("R =", corr)
ggplot(data = df_dz_Edin,
mapping = aes(x = PRS, y = NumberOfProperties)) +
geom_point() +
ggtitle("Figure 1: Registered properties in 2017 vs PRS households in 2011 - Edinburgh") +
xlab("PRS households in 2011 (Census)") +
ylab("No. of registered properties in 201x") +
geom_abline(slope=1) +
geom_text(x = 25, y = 450,
label = corr_text)
ggplot(data = df_dz_Edin,
mapping = aes(x = PRS, y = NumberOfProperties)) +
geom_point() +
ggtitle("Figure 1: Registered properties in 2017 vs PRS households in 2011 - Edinburgh") +
xlab("PRS households in 2011 (Census)") +
ylab("No. of registered properties in 2017") +
geom_abline(slope=1) +
geom_text(x = 25, y = 450,
label = corr_text)
```{r map2, echo=FALSE, fig.cap="Figure 2: Map", out.width = '100%'}
knitr::include_graphics("maps/Change.png")
```{r map2, echo=FALSE, fig.cap="Figure 2: Map", out.width = "100%"}
```{r map2, echo=FALSE}
```{r maps2, echo=FALSE}
```{r, echo=FALSE}
```{r echo=FALSE}
```{r figs, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
# install packages - first time only
# packs <- c("tidyverse", "dplyr", "readxl")
# install.packages(packs)
# load libraries
library(dplyr)
library(tidyverse)
library(readxl)
```{r figs, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
# install packages - first time only
# packs <- c("tidyverse", "dplyr", "readxl")
# install.packages(packs)
# load libraries
library(dplyr)
library(tidyverse)
library(readxl)
# open csv file from FoI request
df_foi <- as_tibble(read_excel("data/16177 Response Data.xlsx"))
# rename cols to remove spaces
names(df_foi) <- c("PropertyPostcode", "NumberOfProperties")
# make id column from row number
df_foi <- tibble::rowid_to_column(df_foi, "ID")
# make pc8 as uppercase version of original - name to match var in pcode lookup
df_foi <- mutate(df_foi,
pc8 = toupper(PropertyPostcode))
# this shows that first two letters in pc8 are always EH
table(str_sub(df_foi$pc8, 1, 2))
# this shows that length of pc8 mostly 7 or 8, but one 9
table(str_length(df_foi$pc8))
# identify the case - "EH16 4 FE"
subset(df_foi, str_length(pc8) > 8)
# change that case
df_foi$pc8[df_foi$pc8 == "EH16 4 FE"] <- "EH16 4FE"
# check that it is fixed
table(str_length(df_foi$pc8))
# quick check on final state of df_foi
head(df_foi)
# open postcode directory - gives some errors which we ignore for now
# NB that to fit onto GitHub, have had to cut down to EH pcodes only but left
#    code unchanged so assumes it is whole of Scotland
df_pcode <- read_csv(
"data/Scottish_Postcode_Directory_2017_2 (EH).csv",
col_types = cols(
pc7 = col_character(),
pc8 = col_character(),
Grid_Reference_Easting = col_double(),
Grid_Reference_Northing = col_double(),
Latitude = col_double(),
Longitude = col_double(),
DataZone2011 = col_character(),
HHC2011 = col_double(),
Pop2011 = col_double(),
HHC2001 = col_double(),
Pop2001 = col_double()
)
)
# cut df_pcodes to "EH"" and only the vars we need to attach to foi data
df_pcode2 <- subset(df_pcode, str_sub(pc7, 1, 2) == "EH",
select = c(pc7, pc8, DataZone2011, LAU_Level1_2011
)
)
# add data from df_pcode2 to df_foi
df_foi <- df_foi %>%
left_join(df_pcode2, by = "pc8")
# check how many cases have missing values - for pc7 it is 18
sum(is.na(df_foi$pc7))
# check number of rows and valid cases in all cols
# NB there is some drop off in HHC and Pop figs, esp. for 2001
nrow(df_foi)
colSums(!is.na(df_foi))
# aggregate foi data to DZ level, summing number of registered props
df_foi_dz <- df_foi %>%
group_by(DataZone2011) %>%
summarise(
NumberOfProperties = sum(NumberOfProperties, na.rm = TRUE)
)
# second cut of df_pcode to those in Edinburgh in order to make list of DZs in city
df_pcode3 <- subset(df_pcode, LAU_Level1_2011 == "S30000008",
select = c(DataZone2011
)
)
# collapse so it is just a list of DZs in Edinburgh
df_dz_Edin <- df_pcode3 %>%
group_by(DataZone2011) %>%
summarise()
# also extract as list
dz_Edin <- (df_dz_Edin$DataZone2011)
# Open census data file with tenure composition for DZs in 2011
df_census <- as_tibble(read_csv("data/tenure DZ2011.csv"))
# make correct PRS and PRSPct figures
df_census <- mutate(df_census,
PRS = PrtRent_2011,
PRSPct = PrtRent_2011/All_HH_2011)
# reduce to DZs in Edinburgh using the list - dz_Edin
df_census <- df_census[df_census$DataZone %in% dz_Edin,]
# rename 'Datazone' as 'Datazone2011' for matching
colnames(df_census)[1] <- "DataZone2011"
# merge census tenure and foi data on to the Edinburgh Datazones file.
df_dz_Edin <- df_dz_Edin %>%
left_join(df_census, by = "DataZone2011")
df_dz_Edin <- df_dz_Edin %>%
left_join(df_foi_dz, by = "DataZone2011")
# check number of DZ and number with registered properties
nrow(df_dz_Edin)
sum(is.na(df_dz_Edin$NumberOfProperties))
# where reg props missing for any DZ, set to zero
df_dz_Edin$NumberOfProperties[
is.na(df_dz_Edin$NumberOfProperties)
] <- 0
# make text for correlation
corr <- signif(
cor(df_dz_Edin$PRS, df_dz_Edin$NumberOfProperties),
digits = 2)
corr_text <- paste("R =", corr)
ggplot(data = df_dz_Edin,
mapping = aes(x = PRS, y = NumberOfProperties)) +
geom_point() +
ggtitle("Figure 1: Registered properties in 2017 vs PRS households in 2011 - Edinburgh") +
xlab("PRS households in 2011 (Census)") +
ylab("No. of registered properties in 2017") +
geom_abline(slope=1) +
geom_text(x = 25, y = 450,
label = corr_text)
knitr::opts_chunk$set(echo = TRUE)
# install packages - first time only
# packs <- c("tidyverse", "dplyr", "readxl")
# install.packages(packs)
# load libraries
library(dplyr)
library(tidyverse)
library(readxl)
# open csv file from FoI request
df_foi <- as_tibble(read_excel("data/16177 Response Data.xlsx"))
# rename cols to remove spaces
names(df_foi) <- c("PropertyPostcode", "NumberOfProperties")
# make id column from row number
df_foi <- tibble::rowid_to_column(df_foi, "ID")
# make pc8 as uppercase version of original - name to match var in pcode lookup
df_foi <- mutate(df_foi,
pc8 = toupper(PropertyPostcode))
# this shows that first two letters in pc8 are always EH
table(str_sub(df_foi$pc8, 1, 2))
# this shows that length of pc8 mostly 7 or 8, but one 9
table(str_length(df_foi$pc8))
# identify the case - "EH16 4 FE"
subset(df_foi, str_length(pc8) > 8)
# change that case
df_foi$pc8[df_foi$pc8 == "EH16 4 FE"] <- "EH16 4FE"
# check that it is fixed
table(str_length(df_foi$pc8))
# quick check on final state of df_foi
head(df_foi)
# open postcode directory - gives some errors which we ignore for now
# NB that to fit onto GitHub, have had to cut down to EH pcodes only but left
#    code unchanged so assumes it is whole of Scotland
df_pcode <- read_csv(
"data/Scottish_Postcode_Directory_2017_2 (EH).csv",
col_types = cols(
pc7 = col_character(),
pc8 = col_character(),
Grid_Reference_Easting = col_double(),
Grid_Reference_Northing = col_double(),
Latitude = col_double(),
Longitude = col_double(),
DataZone2011 = col_character(),
HHC2011 = col_double(),
Pop2011 = col_double(),
HHC2001 = col_double(),
Pop2001 = col_double()
)
)
# cut df_pcodes to "EH"" and only the vars we need to attach to foi data
df_pcode2 <- subset(df_pcode, str_sub(pc7, 1, 2) == "EH",
select = c(pc7, pc8, DataZone2011, LAU_Level1_2011
)
)
# add data from df_pcode2 to df_foi
df_foi <- df_foi %>%
left_join(df_pcode2, by = "pc8")
# check how many cases have missing values - for pc7 it is 18
sum(is.na(df_foi$pc7))
# check number of rows and valid cases in all cols
# NB there is some drop off in HHC and Pop figs, esp. for 2001
nrow(df_foi)
colSums(!is.na(df_foi))
# aggregate foi data to DZ level, summing number of registered props
df_foi_dz <- df_foi %>%
group_by(DataZone2011) %>%
summarise(
NumberOfProperties = sum(NumberOfProperties, na.rm = TRUE)
)
# second cut of df_pcode to those in Edinburgh in order to make list of DZs in city
df_pcode3 <- subset(df_pcode, LAU_Level1_2011 == "S30000008",
select = c(DataZone2011
)
)
# collapse so it is just a list of DZs in Edinburgh
df_dz_Edin <- df_pcode3 %>%
group_by(DataZone2011) %>%
summarise()
# also extract as list
dz_Edin <- (df_dz_Edin$DataZone2011)
# Open census data file with tenure composition for DZs in 2011
df_census <- as_tibble(read_csv("data/tenure DZ2011.csv"))
# make correct PRS and PRSPct figures
df_census <- mutate(df_census,
PRS = PrtRent_2011,
PRSPct = PrtRent_2011/All_HH_2011)
# reduce to DZs in Edinburgh using the list - dz_Edin
df_census <- df_census[df_census$DataZone %in% dz_Edin,]
# rename 'Datazone' as 'Datazone2011' for matching
colnames(df_census)[1] <- "DataZone2011"
# merge census tenure and foi data on to the Edinburgh Datazones file.
df_dz_Edin <- df_dz_Edin %>%
left_join(df_census, by = "DataZone2011")
df_dz_Edin <- df_dz_Edin %>%
left_join(df_foi_dz, by = "DataZone2011")
# check number of DZ and number with registered properties
nrow(df_dz_Edin)
sum(is.na(df_dz_Edin$NumberOfProperties))
# where reg props missing for any DZ, set to zero
df_dz_Edin$NumberOfProperties[
is.na(df_dz_Edin$NumberOfProperties)
] <- 0
# make text for correlation
corr <- signif(
cor(df_dz_Edin$PRS, df_dz_Edin$NumberOfProperties),
digits = 2)
corr_text <- paste("R =", corr)
# 'expected' line given number of llord register (sum(df_foi$NumberOfProperties))
# and number at Census (49980)
expected_slope <- sum(df_foi$NumberOfProperties)/49980
ggplot(data = df_dz_Edin,
mapping = aes(x = PRS, y = NumberOfProperties)) +
geom_point() +
ggtitle("Figure 1: Registered properties in 2017 vs PRS households in 2011 - Edinburgh") +
xlab("PRS households in 2011 (Census)") +
ylab("No. of registered properties in 2017") +
geom_abline(slope=1) +
geom_abline(slope=expected_slope, linetype = "dashed") +
geom_text(x = 25, y = 450,
label = corr_text)
knitr::opts_chunk$set(echo = TRUE)
# install packages - first time only
# packs <- c("tidyverse", "dplyr", "readxl")
# install.packages(packs)
# load libraries
library(dplyr)
library(tidyverse)
library(readxl)
# open csv file from FoI request
df_foi <- as_tibble(read_excel("data/16177 Response Data.xlsx"))
# rename cols to remove spaces
names(df_foi) <- c("PropertyPostcode", "NumberOfProperties")
# make id column from row number
df_foi <- tibble::rowid_to_column(df_foi, "ID")
# make pc8 as uppercase version of original - name to match var in pcode lookup
df_foi <- mutate(df_foi,
pc8 = toupper(PropertyPostcode))
# this shows that first two letters in pc8 are always EH
table(str_sub(df_foi$pc8, 1, 2))
# this shows that length of pc8 mostly 7 or 8, but one 9
table(str_length(df_foi$pc8))
# identify the case - "EH16 4 FE"
subset(df_foi, str_length(pc8) > 8)
# change that case
df_foi$pc8[df_foi$pc8 == "EH16 4 FE"] <- "EH16 4FE"
# check that it is fixed
table(str_length(df_foi$pc8))
# quick check on final state of df_foi
head(df_foi)
# open postcode directory - gives some errors which we ignore for now
# NB that to fit onto GitHub, have had to cut down to EH pcodes only but left
#    code unchanged so assumes it is whole of Scotland
df_pcode <- read_csv(
"data/Scottish_Postcode_Directory_2017_2 (EH).csv",
col_types = cols(
pc7 = col_character(),
pc8 = col_character(),
Grid_Reference_Easting = col_double(),
Grid_Reference_Northing = col_double(),
Latitude = col_double(),
Longitude = col_double(),
DataZone2011 = col_character(),
HHC2011 = col_double(),
Pop2011 = col_double(),
HHC2001 = col_double(),
Pop2001 = col_double()
)
)
# cut df_pcodes to "EH"" and only the vars we need to attach to foi data
df_pcode2 <- subset(df_pcode, str_sub(pc7, 1, 2) == "EH",
select = c(pc7, pc8, DataZone2011, LAU_Level1_2011
)
)
# add data from df_pcode2 to df_foi
df_foi <- df_foi %>%
left_join(df_pcode2, by = "pc8")
# check how many cases have missing values - for pc7 it is 18
sum(is.na(df_foi$pc7))
# check number of rows and valid cases in all cols
# NB there is some drop off in HHC and Pop figs, esp. for 2001
nrow(df_foi)
colSums(!is.na(df_foi))
# aggregate foi data to DZ level, summing number of registered props
df_foi_dz <- df_foi %>%
group_by(DataZone2011) %>%
summarise(
NumberOfProperties = sum(NumberOfProperties, na.rm = TRUE)
)
# second cut of df_pcode to those in Edinburgh in order to make list of DZs in city
df_pcode3 <- subset(df_pcode, LAU_Level1_2011 == "S30000008",
select = c(DataZone2011
)
)
# collapse so it is just a list of DZs in Edinburgh
df_dz_Edin <- df_pcode3 %>%
group_by(DataZone2011) %>%
summarise()
# also extract as list
dz_Edin <- (df_dz_Edin$DataZone2011)
# Open census data file with tenure composition for DZs in 2011
df_census <- as_tibble(read_csv("data/tenure DZ2011.csv"))
# make correct PRS and PRSPct figures
df_census <- mutate(df_census,
PRS = PrtRent_2011,
PRSPct = PrtRent_2011/All_HH_2011)
# reduce to DZs in Edinburgh using the list - dz_Edin
df_census <- df_census[df_census$DataZone %in% dz_Edin,]
# rename 'Datazone' as 'Datazone2011' for matching
colnames(df_census)[1] <- "DataZone2011"
# merge census tenure and foi data on to the Edinburgh Datazones file.
df_dz_Edin <- df_dz_Edin %>%
left_join(df_census, by = "DataZone2011")
df_dz_Edin <- df_dz_Edin %>%
left_join(df_foi_dz, by = "DataZone2011")
# check number of DZ and number with registered properties
nrow(df_dz_Edin)
sum(is.na(df_dz_Edin$NumberOfProperties))
# where reg props missing for any DZ, set to zero
df_dz_Edin$NumberOfProperties[
is.na(df_dz_Edin$NumberOfProperties)
] <- 0
# make text for correlation
corr <- signif(
cor(df_dz_Edin$PRS, df_dz_Edin$NumberOfProperties),
digits = 2)
corr_text <- paste("R =", corr)
# 'expected' line given number of llord register (sum(df_foi$NumberOfProperties))
# and number at Census (49980)
expected_slope <- sum(df_foi$NumberOfProperties)/49980
ggplot(data = df_dz_Edin,
mapping = aes(x = PRS, y = NumberOfProperties)) +
geom_point() +
ggtitle("Figure 2: Registered properties in 2017 vs PRS households in 2011 - Edinburgh") +
xlab("PRS households in 2011 (Census)") +
ylab("No. of registered properties in 2017") +
geom_abline(slope=1) +
geom_abline(slope=expected_slope, linetype = "dashed") +
geom_text(x = 25, y = 450,
label = corr_text)
